import{parseMIMEType,isErrorStatus,createTimeoutError,createCancelError}from"./util";import{AJAXError}from"../ajax-error";function createOnLoad(e,r,o,t){return function(){let a,n;switch(r.responseType||parseMIMEType(e.getResponseHeader("Content-Type"))){case"json":try{a=JSON.parse(e.responseText)}catch(e){n="Invalid JSON structure"}break;case"xml":a=e.responseXML,a&&a.documentElement||(n="Invalid XML format");break;case"blob":a=e.response;break;default:a=e.responseText}const s=e.status;let c;isErrorStatus(s)?c=new AJAXError(e,r,"Error (HTTP status code: "+s+")"):n&&(c=new AJAXError(e,r,n)),c?(c.code=s,c.data=a,t(Object.freeze(c))):o(Object.freeze({xhr:e,options:r,data:a}))}}const ajaxRecords=Object.create(null);let autoId=0;export function createAJAXRecord(e,r,o,t){e.onload=createOnLoad(e,r,o,t),e.ontimeout=function(){t(Object.freeze(createTimeoutError(e,r)))},e.onerror=function(){t(Object.freeze(new AJAXError(e,r,"Network error")))},r.onDownloadProgress&&e.addEventListener("progress",r.onDownloadProgress),r.onUploadProgress&&e.upload&&e.upload.addEventListener("progress",r.onUploadProgress),autoId===Number.MAX_SAFE_INTEGER&&(autoId=0);const a=++autoId;return ajaxRecords[a]={xhr:e,options:r,resolve:o,reject:t},a}export function deleteAJAXRecord(e){delete ajaxRecords[e]}export function cancelRequest(e){const r=ajaxRecords[e];r&&(r.xhr.abort(),r.reject(createCancelError(r.xhr,r.options)))}