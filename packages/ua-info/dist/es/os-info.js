import{execRules}from"./internal/ua-detector";import{osRules}from"./internal/os-rules";import{Version}from"./version";const propMap={ios:"isIOS",openharmony:"isOpenHarmony",android:"isAndroid",windows:"isWindows",macos:"isMacOS"};function platformToOS(s){switch(s){case"Android":return"android";case"iPad":case"iPhone":case"iPod":return"ios";case"MacIntel":return"macos";case"Win32":return"windows"}}export class OSInfo{constructor(s,o){var i;let e;if(this.isIOS=!1,this.isAndroid=!1,this.isHarmonyOS=!1,this.isOpenHarmony=!1,this.isWindows=!1,this.isMacOS=!1,null==o?void 0:o.platform){const s=platformToOS(o.platform);void 0!==s&&(e={name:s,version:""})}let n=null!==(i=execRules(s,osRules))&&void 0!==i?i:e;n?(e&&e.name!==n.name&&(n=e),"macos"===n.name&&(null==o?void 0:o.maxTouchPoints)&&(n.name="ios",n.version=""),this[propMap[n.name]]=!0,this.version=new Version(n.version),this.isAndroid&&/\bHarmonyOS\b/.test(s)&&(this.isHarmonyOS=!0),Object.freeze(this)):this.version=Object.freeze(new Version(""))}}