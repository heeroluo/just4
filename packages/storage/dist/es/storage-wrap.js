import{mergeArray}from"@just4/util/array";import{SimpleWrap}from"./simple-wrap";export class StorageWrap{constructor(e,t={keyPrefix:""}){let i;this._plugins=[];try{if("function"==typeof e)i=e();else if("local"===e)i=window.localStorage;else{if("session"!==e)throw new Error("Invalid storage type.");i=window.sessionStorage}this.available=!0}catch(e){console.warn("The storage wrap is not available. Message: "+e.message),i={getItem:()=>null,setItem(){throw new Error("")},removeItem(){}},this.available=!1}this._storage=new SimpleWrap(i,t.keyPrefix),this._options=t,this._options.plugins&&mergeArray(this._plugins,this._options.plugins)}_doGetting(e){e.value=this._storage.get(e.key)}handleGetting(e){this._doGetting(e),this._plugins.forEach((function(t){t.handleGetting(e)}))}get(e){const t={key:e,value:null,parent:this};return this.handleGetting(t),t.value}getAsJSON(e){try{return JSON.parse(this.get(e)||"")}catch(e){return null}}_doSetting(e){this._storage.set(e.key,e.value)}handleSetting(e){this._doSetting(e),this._plugins.forEach((function(t){return t.handleSetting(e)}))}set(e,t,i){const s={key:e,value:t,options:i,parent:this};this.handleSetting(s)}setAsJSON(e,t,i){return this.set(e,JSON.stringify(t),i)}_doRemoving(e){this._storage.remove(e.key)}handleRemoving(e){this._doRemoving(e),this._plugins.forEach((function(t){t.handleRemoving(e)}))}remove(e){this.handleRemoving({key:e,parent:this})}}