import{mergeArray}from"@just4/util/array";export class StorageWrap{constructor(t={getItem:()=>null,setItem(){throw new Error("")},removeItem(){}},e={keyPrefix:""}){this._plugins=[],this.__storage=t,this._options=e,this._options.plugins&&mergeArray(this._plugins,this._options.plugins)}getRealKey(t){var e;return(null!==(e=this._options.keyPrefix)&&void 0!==e?e:"")+t}_getItem(t){return this.__storage.getItem(this.getRealKey(t))}_setItem(t,e){try{this.__storage.setItem(this.getRealKey(t),e)}catch(t){}}_removeItem(t){this.__storage.removeItem(this.getRealKey(t))}_doGetting(t){t.value=this._getItem(t.key)}handleGetting(t){this._doGetting(t),this._plugins.forEach((function(e){e.handleGetting(t)}))}get(t){const e={key:t,value:null,parent:this};return this.handleGetting(e),e.value}getAsJSON(t){try{return JSON.parse(this.get(t)||"")}catch(t){return null}}_doSetting(t){return this._setItem(t.key,t.value)}handleSetting(t){this._doSetting(t),this._plugins.forEach((function(e){e.handleSetting(t)}))}set(t,e,i){const s={key:t,value:e,options:i,parent:this};this.handleSetting(s)}setAsJSON(t,e,i){return this.set(t,JSON.stringify(e),i)}_doRemoving(t){this._removeItem(this.getRealKey(t.key))}handleRemoving(t){this._doRemoving(t),this._plugins.forEach((function(e){e.handleRemoving(t)}))}remove(t){this.handleRemoving({key:t,parent:this})}}